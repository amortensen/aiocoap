# installation of cython is a workaround for tinydtls-cython that should be avoided there
#
# running tests twice, so if something breaks when optional dependencies are
# missing, it still shows up. (full coverage would mean running each
# combination, but let's not blow the test matrix out of proportion).
test:3.6:
  image: "python:3.6-stretch"
  script:
    - echo Using cache:; ls .eggs/
    - rm -f .coverage* collected-coverage/3.6/
    - pip3 install coverage
    - pip3 install cython
    - AIOCOAP_TEST_EXTRAS= python3 -m coverage run --parallel ./setup.py test
    - python3 -m coverage run --parallel ./setup.py test
    - pip3 install uvloop
    - AIOCOAP_TESTS_LOOP=uvloop python3 -m coverage run --parallel ./setup.py test
    - python3 -m coverage combine
    - python3 -m coverage report --include=aiocoap/\*
    - mkdir collected-coverage/3.6/ -p
    - mv .coverage* collected-coverage/3.6/
  artifacts:
    paths:
      - collected-coverage
  cache:
    paths:
      - .eggs/

# Currently, none of the images provide a recent OpenSSL; waiting for python:3.5-stretch or for python:3.5 to become stretch

# test:3.5:
#   image: "python:3.5"
#   script:
#     - ./setup.py test

# Currently segfaults building tinydtls, and not supported any more anyway

# test:3.4:
#   image: "python:3.4"
#   script:
#     - pip3 install cython
#     - ./setup.py test

pages:
  image: "python:3.6-stretch"
  stage: deploy
  dependencies:
    - test:3.6
  script:
    - pip3 install coverage
    - rm -f .coverage* public
    - mv collected-coverage/*/.coverage* .
    - python3 -m coverage html --include=aiocoap/\*
    - mv htmlcov public
  artifacts:
    paths:
      - public
